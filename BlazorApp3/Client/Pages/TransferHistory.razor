@page "/transfer/history"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization;
@using BlazorApp3.Shared;

@attribute [Authorize]
@inject HttpClient HttpClient

<style>
    /* Pagination links */
    .pagination a {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
    }

    /* Style the active/current link */
    .pagination a.active {
        background-color: dodgerblue;
        color: white;
    }

    /* Add a grey background color on mouse-over */
    .pagination a:hover:not(.active) {
        background-color: #ddd;
    }
</style>

<h3>TransferHistory</h3>

@if (transactionsData?.Transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <p>Sorting:</p>
    <button class="btn @(direction == Direction.Inbound ? "btn-secondary" : " btn-outline-secondary")"
            @onclick="() => ChangeDirection(Direction.Inbound)">
        Inbound
    </button>
    <button class="btn @(direction == Direction.Outbound ? "btn-secondary" : " btn-outline-secondary")"
            @onclick="() => ChangeDirection(Direction.Outbound)">
        Outbound
    </button>
    <table class="table">
        <thead>
            <tr>
                <td>Date</td>
                <td>Amount</td>
                <td>DestinationWalletId</td>
                <td>SourceWalletId</td>
                <td>Id</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactionsData.Transactions)
            {
                <tr>
                    <td>@transaction.Date</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.DestinationWalletId</td>
                    <td>@transaction.SourceWalletId</td>
                    <td>@transaction.Id</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <a @onclick="() => LoadTransferHistory(Math.Clamp(pageNumber - 1, 1, transactionsData.Count))">&laquo;</a>
        @for (int i = Math.Clamp(pageNumber - 2, 1, CalculatePageCount()); i <= Math.Clamp(pageNumber + 2, 1, CalculatePageCount()); i++)
        {
            var pn = i;
            <a class="@(i == pageNumber ? "active" : "")" @onclick="() => LoadTransferHistory(pn)">@pn</a>
        }
        <a @onclick="() => LoadTransferHistory(Math.Clamp(pageNumber + 1, 1, transactionsData.Count))">&raquo;</a>
    </div>
}

@code {
    private TransactionsHistoryData transactionsData;
    private int limit = 1;
    private int pageNumber = 1;

    private Direction direction;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadTransferHistory(pageNumber);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task LoadTransferHistory(int pNum)
    {
        transactionsData = await HttpClient.GetFromJsonAsync<TransactionsHistoryData>($"api/wallet/transferHistory/{limit}/{pNum}/{direction}");
        pageNumber = pNum;
    }

    private int CalculatePageCount()
    {
        var div = transactionsData.Count / limit;
        var mod = transactionsData.Count % limit;
        return div + (mod > 0 ? 1 : 0);
    }
    private async Task ChangeDirection(Direction dir)
    {
        direction = dir == direction ? Direction.None : dir;
        await LoadTransferHistory(pageNumber);
    }
}
